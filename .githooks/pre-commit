#!/usr/bin/env bash
# Abort commit if any staged C/C++ headers/sources are not clang-formatted per .clang-format
set -euo pipefail

# Pick clang-format binary (env override > system > versioned)
CLANG_FORMAT_BIN=${CLANG_FORMAT_BIN:-}
if [[ -z "${CLANG_FORMAT_BIN}" ]]; then
  if command -v clang-format >/dev/null 2>&1; then
    CLANG_FORMAT_BIN=clang-format
  elif command -v clang-format-14 >/dev/null 2>&1; then
    CLANG_FORMAT_BIN=clang-format-14
  else
    echo "pre-commit: clang-format not found (install clang-format or set CLANG_FORMAT_BIN)" >&2
    exit 1
  fi
fi

# Get staged files we care about (Added/Copied/Modified/Renamed)
mapfile -t files < <(git diff --cached --name-only --diff-filter=ACMR | \
  grep -E '\\.(c|h|cc|cpp|hpp)$' || true)

[[ ${#files[@]} -eq 0 ]] && exit 0

fail=0
for f in "${files[@]}"; do
  # Skip non-existent (in case of rename parts)
  if ! git cat-file -e ":${f}" 2>/dev/null; then
    continue
  fi
  tmp_staged=$(mktemp)
  tmp_fmt=$(mktemp)
  # Use index blob to avoid mismatch with working tree
  git show ":${f}" >"${tmp_staged}" || { echo "pre-commit: failed to read staged ${f}" >&2; fail=1; continue; }
  "${CLANG_FORMAT_BIN}" -style=file -assume-filename "${f}" <"${tmp_staged}" >"${tmp_fmt}" \
    || { echo "pre-commit: clang-format failed on ${f}" >&2; fail=1; rm -f "${tmp_staged}" "${tmp_fmt}"; continue; }
  if ! diff -u "${tmp_staged}" "${tmp_fmt}" >/dev/null; then
    echo "pre-commit: formatting issues in ${f}. Please run clang-format." >&2
    fail=1
  fi
  rm -f "${tmp_staged}" "${tmp_fmt}"
done

if [[ ${fail} -ne 0 ]]; then
  echo "pre-commit: unformatted files detected. Commit aborted." >&2
  echo "Hint: format staged changes with 'git clang-format --staged' or run clang-format on files." >&2
  exit 1
fi

exit 0
